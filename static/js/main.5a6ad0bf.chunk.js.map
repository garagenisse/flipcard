{"version":3,"sources":["components/Flip.js","components/NewCard.js","App.js","serviceWorker.js","index.js","data/cards.js"],"names":["Flip","props","state","flipped","my_lang","forreign_lang","console","log","this","setState","card","rateEasy","rateHard","removeCard","className","onClick","toggleCard","bind","React","Component","NewCard","addEditCardHandler","event","newCard","newCardSubmitHandler","MyLangInput","focus","preventDefault","newCardChangeHandler","name","target","val","value","onSubmit","ref","input","type","placeholder","onChange","App","cards","map","i","factor","ix","randomizeCard","currentCard","remaining","filter","length","Math","floor","random","elem","concat","handleNewCard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a6ad0bf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Flip extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            flipped: false,\r\n            my_lang: '',\r\n            forreign_lang: ''\r\n        }\r\n        console.log(\"Construct flip\")\r\n    }\r\n\r\n    toggleCard() {\r\n        this.setState({ flipped: !this.state.flipped });\r\n    }\r\n    render() {\r\n\r\n        if (this.props.card == null)\r\n            return (<h1>Well done, or cheater!!!</h1>)\r\n        const { rateEasy, rateHard, removeCard } = this.props\r\n        if (this.state.flipped) {\r\n            return (\r\n                <div className=\"flip\">\r\n                    <div className=\"notification\">\r\n                        <button className=\"delete\" onClick={() => { removeCard(); this.toggleCard() }}></button>\r\n                        <div className=\"box\">\r\n                            <div className=\"field\">\r\n                                <button className=\"button is-success is-large is-fullwidth\" onClick={this.toggleCard.bind(this)}>{this.props.card.my_lang}</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"buttons is-grouped is-centered\">\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-success\" onClick={() => { rateEasy(); this.toggleCard() }}>Lätt</button>\r\n                            </div>\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-danger\" onClick={() => { rateHard(); this.toggleCard() }}>Svårt</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"flip\">\r\n                    <div className=\"notification\">\r\n                        <div className=\"box\">\r\n                            <button className=\"button is-success is-large is-fullwidth\" onClick={this.toggleCard.bind(this)}>{this.props.card.forreign_lang}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Flip","import React from 'react'\r\n\r\nclass NewCard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            my_lang: '',\r\n            forreign_lang: '',\r\n        }\r\n    }\r\n\r\n    addEditCardHandler = (event) => {\r\n        // Check edit or add, no more validation, empty is fine with me\r\n        let newCard = { \r\n            my_lang: this.state.my_lang,\r\n            forreign_lang: this.state.forreign_lang,\r\n        }\r\n\r\n        // Send to parent\r\n        this.props.newCardSubmitHandler(newCard)\r\n\r\n        // Reset\r\n        this.setState({\r\n            my_lang: '',\r\n            forreign_lang: '',\r\n        })\r\n\r\n        this.MyLangInput.focus()\r\n\r\n\r\n        // Prevent default action of submit button\r\n        event.preventDefault();\r\n      };\r\n\r\n    newCardChangeHandler = (event) => {\r\n        let name = event.target.name;\r\n        let val = event.target.value;\r\n        console.log(\"Changed: \", name, \" to: \", val)\r\n        this.setState({[name]: val});\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.addEditCardHandler}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input\" ref={(input) => { this.MyLangInput = input; }} type=\"text\" placeholder=\"Mitt språk\" name=\"my_lang\" value={this.state.my_lang} onChange={this.newCardChangeHandler}/>\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                        <span className=\"icon is-small is-right\">\r\n                            <i className=\"fas fa-check\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input\" type=\"text\" placeholder=\"Nytt språk\" name=\"forreign_lang\" value={this.state.forreign_lang} onChange={this.newCardChangeHandler} />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-lock\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <button className=\"button is-success\">Lägg till!</button>\r\n            </form>)\r\n    }\r\n}\r\n\r\nexport default NewCard","import React from 'react';\nimport Flip from './components/Flip'\nimport NewCard from './components/NewCard'\nimport './App.css';\nimport { anyTypeAnnotation, tsImportEqualsDeclaration } from '@babel/types';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    \n    // Build the card data\n    const cards = props.cards.map((card,i) => ({ my_lang : card.my_lang, forreign_lang : card.forreign_lang, factor: 100 }))\n\n    var ix = this.randomizeCard(cards);\n\n        // Set the state, the cards and the first random displayed\n        this.state = {\n          cards: cards,\n          currentCard: ix        }\n   \n  }\n\n  randomizeCard(cards) {\n\n    var ix,card\n\n    // Kolla om det finns kort kvar ens\n    var remaining = cards.filter((card) => card.factor > 0).length\n    if(remaining <= 0) \n      return -1\n\n    console.log(\"Remaining: \", remaining)\n    do {\n      ix = Math.floor(Math.random() * cards.length)\n      card = cards[ix]  \n    }\n    while((Math.random() * 100) > card.factor  )\n\n    return ix\n  }\n\n  rateHard() {\n    console.log(\"Rate hard: \",this.state.cards[this.state.currentCard].my_lang)\n    var cards = this.state.cards;\n    cards[this.state.currentCard].factor += cards[this.state.currentCard].factor < 100 ? 10 : 0\n    var ix = this.randomizeCard(this.state.cards)\n    this.setState({currentCard: ix})\n  }\n\n  rateEasy() {\n    console.log(\"Rate easy: \",this.state.cards[this.state.currentCard].my_lang)\n    var cards = this.state.cards;\n    cards[this.state.currentCard].factor -= cards[this.state.currentCard].factor > 10 ? 10 : 0\n    var ix = this.randomizeCard(this.state.cards)\n    this.setState({currentCard: ix, cards: cards})\n  }\n\n  removeCard() {\n    console.log(\"Remove card: \",this.state.cards[this.state.currentCard].my_lang)\n\n    this.setState(state => {\n      const cards = this.state.cards.filter((elem, i) => { return !(this.state.currentCard === i)})\n      return {\n        cards : cards,\n        currentCard : this.randomizeCard(cards)\n      };\n    });  \n  }\n\n  handleNewCard(newCard) {\n    newCard.factor = 100\n    console.log(\"NewCard: \", newCard) \n\n    this.setState(state => {\n      const cards = state.cards.concat(newCard);\n      return {\n        cards : cards,\n        currentCard : this.randomizeCard(cards)\n      };\n    });\n  } \n\n  render() {\n\n    console.log(\"Current card: \", this.state)\n    const card = this.state.currentCard >= 0 ? this.state.cards[this.state.currentCard] : null\n\n    return (\n      <div className=\"App\">\n        <section className=\"section\">\n          <div className=\"container\">\n            <h1 className=\"title\">Flipcard - Play</h1>\n            <p className=\"subtitle is-small\">\n              <i>Klicka för att vända kort, lägg till nya eller tabort</i>\n            </p>\n  \n            <Flip card={card} removeCard={this.removeCard.bind(this)} rateEasy={this.rateEasy.bind(this) } rateHard={this.rateHard.bind(this)} ></Flip>\n  \n            \n          </div>\n        </section>\n        <section className=\"section\">\n          <div className=\"container\">\n            <NewCard newCardSubmitHandler={this.handleNewCard.bind(this)}></NewCard>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport cards from './data/cards';\n\nReactDOM.render(<App cards={cards.cards}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\r\n    cards: [\r\n        { my_lang: \"Kort\", forreign_lang: \"Card\" },\r\n    ],\r\n}\r\n"],"sourceRoot":""}